plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.dagger.hilt)
    alias(core.plugins.compose.compiler)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.jetbrains.kotlin.serialization)
    alias(libs.plugins.kapt)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.navigation.safeargs)
    alias(libs.plugins.realm.kotlin)
}

def enableLeakCanary = false

def appCompileSdk = rootProject.ext["appCompileSdk"]
def appMinSdk = rootProject.ext["appMinSdk"]
def javaVersion = rootProject.ext["javaVersion"]

android {
    namespace 'com.infomaniak.mail'
    compileSdk appCompileSdk

    defaultConfig {
        applicationId 'com.infomaniak.mail'
        minSdk appMinSdk
        targetSdk appCompileSdk
        versionCode 1_15_000_01
        versionName '1.15.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        setProperty "archivesBaseName", "infomaniak-mail-$versionName ($versionCode)"

        buildConfigField 'String', 'CLIENT_ID', '"E90BC22D-67A8-452C-BE93-28DA33588CA4"'
        buildConfigField 'String', 'CREATE_ACCOUNT_URL', '"https://welcome.preprod.dev.infomaniak.ch/signup/ikmail?app=true"'
        buildConfigField 'String', 'CREATE_ACCOUNT_SUCCESS_HOST', '"ksuite.preprod.dev.infomaniak.ch"'
        buildConfigField 'String', 'CREATE_ACCOUNT_CANCEL_HOST', '"welcome.preprod.dev.infomaniak.ch"'
        buildConfigField 'String', 'IMPORT_EMAILS_URL', '"https://import-email.preprod.dev.infomaniak.ch"'
        // buildConfigField 'String', 'MAIL_API', '"https://mail.infomaniak.com"'
        buildConfigField 'String', 'MAIL_API', '"https://mail.preprod.dev.infomaniak.ch"' // Pre-production environment
        buildConfigField 'String', 'SHOP_URL', '"https://ik.me"'
        buildConfigField 'String', 'CHATBOT_URL', '"https://www.preprod.dev.infomaniak.ch/chatbot"'
        buildConfigField 'String', 'FAQ_URL', '"https://www.preprod.dev.infomaniak.ch/fr/support/faq/admin2/service-mail"'
        buildConfigField 'String', 'MANAGE_SIGNATURES_URL', '"https://mail.preprod.dev.infomaniak.ch/0/settings/signatures"'

        buildConfigField 'String', 'BUGTRACKER_MAIL_BUCKET_ID', '"app_mail"'
        buildConfigField 'String', 'BUGTRACKER_MAIL_PROJECT_NAME', '"mail"'
        buildConfigField 'String', 'GITHUB_REPO', '"android-mail"'
        buildConfigField 'String', 'GITHUB_REPO_URL', '"https://github.com/Infomaniak/android-kMail"'

        resValue 'string', 'ATTACHMENTS_AUTHORITY', 'com.infomaniak.mail.attachments'
        resValue 'string', 'EML_AUTHORITY', 'com.infomaniak.mail.eml'
        resValue 'string', 'FILES_AUTHORITY', 'com.infomaniak.mail.attachments;com.infomaniak.mail.eml'

        resourceConfigurations += ["en", "de", "es", "fr", "it"]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    kotlinOptions { jvmTarget = javaVersion }

    buildFeatures {
        buildConfig true
        viewBinding true
        compose true
    }

    flavorDimensions += 'distribution'

    productFlavors {
        standard {
            dimension 'distribution'
            apply plugin: 'com.google.gms.google-services'
            getIsDefault().set(true)
        }
        fdroid { dimension 'distribution' }
    }
}

dependencies {
    implementation project(':Core')
    implementation project(':Core:Auth')
    implementation project(':Core:Avatar')
    implementation project(':Core:Coil')
    implementation project(':Core:Compose:Margin')
    implementation project(':Core:Compose:MaterialThemeFromXml')
    implementation project(':Core:CrossAppLogin')
    implementation project(':Core:CrossAppLoginUI')
    implementation project(':Core:FragmentNavigation')
    implementation project(':Core:Legacy')
    implementation project(':Core:Legacy:AppLock')
    implementation project(':Core:Legacy:BugTracker')
    implementation project(':Core:Legacy:Confetti')
    implementation project(':Core:Legacy:Stores')
    implementation project(':Core:Matomo')
    implementation project(':Core:MyKSuite')
    implementation project(':Core:Network')
    implementation project(':Core:UserAvatar')
    implementation project(':EmojiComponents')
    implementation project(':HtmlCleaner')

    implementation libs.rich.html.editor

    implementation libs.realm.kotlin.base

    standardImplementation libs.play.services.base
    standardImplementation libs.firebase.messaging.ktx

    implementation libs.lottie
    implementation libs.dragdropswipe.recyclerview
    implementation libs.dotsindicator
    implementation libs.emoji2.emojipicker

    implementation libs.flexbox
    implementation libs.lifecycle.process
    implementation libs.webkit
    implementation libs.work.concurrent.futures
    implementation core.androidx.work.runtime

    implementation libs.hilt.android
    implementation libs.hilt.work
    // TODO: Migrate to KSP, actually Hilt is not yet supported with KSP
    // https://kotlinlang.org/docs/ksp-overview.html#supported-libraries
    // https://github.com/google/dagger/issues/2349
    kapt libs.hilt.compiler
    kapt libs.hilt.compiler.androidx

    implementation libs.sentry.android.fragment

    // Not used directly in the code, but coil3 injects it automatically simply when it's present as a dependency in the project
    implementation core.coil.svg

    coreLibraryDesugaring libs.desugar.jdk

    // Compose
    implementation platform(core.compose.bom)
    implementation libs.compose.ui.android
    implementation core.compose.runtime
    implementation core.compose.material3
    implementation core.compose.ui.tooling.preview

    // Test
    testImplementation libs.junit
    testImplementation libs.mockito.kotlin
    androidTestImplementation libs.ext.junit

    // Debug
    if (enableLeakCanary) debugImplementation libs.leakcanary.android
}
